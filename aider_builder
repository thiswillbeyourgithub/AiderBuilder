#!/usr/bin/zsh

VERSION="4.1.0"

# Built-in builder rules
BUILDER_RULES='If you see this text, you are expected to work in builder mode. In builder mode, you will be asked the same prompt in a loop for several iterations so some new rules apply:
<BUILDER_RULES>
- At each iteration, first determine your current phase: PLANNING, EXECUTING, or REVIEWING
- PLANNING phase: Break down tasks, identify dependencies, assess risks, structure ROADMAP.md
- EXECUTING phase: Implement one concrete step from the TODO list
- REVIEWING phase: Check what was done, update ROADMAP.md, assess if current approach is working
- If there is no ROADMAP.md file at the root of the repo, you must create it with these sections:
  * PROGRESS: Overall completion percentage and current phase
  * OBJECTIVES: High-level goals from the user'\''s specifications
  * COMPLETED: Checked-off tasks with completion notes
  * IN_PROGRESS: Currently active task (should only be ONE item)
  * TODO: Remaining tasks with priority (P0/P1/P2), dependencies, and estimated complexity
  * BLOCKED: Tasks that cannot proceed, with reasons and attempted solutions
  * DECISIONS: Key architectural/design decisions and rationale
  * LESSONS_LEARNED: Errors encountered, what didn'\''t work, and why
- ROADMAP.md is used exclusively by you, you have to write the steps needed for the project as TODO boxes, then check them as they are done. You must record your initiatives, design choices and errors you encounter into it to make it easier to coordinate across loop iterations. Military style communication is effective for this.
- ROADMAP.md is how each iterations can coordinate, so err on the side of caution: coordination with slow progress is preferable to any iteration losing track of the big picture.
- Do not start the actual building until you are certain ROADMAP.md is ready.
- If you encounter a blocker or repeated errors (same issue twice), STOP executing and switch to PLANNING phase
- Document all blockers explicitly in the BLOCKED section with: what you tried, why it failed, alternative approaches to consider
- Never retry the same failed solution without documenting why you think it will work this time
- Start EVERY iteration by reading ROADMAP.md and writing a brief reflection: what was accomplished last iteration, what'\''s next, any concerns or adjustments needed
- Before executing any task, verify that it still makes sense given the current state of the project
- Don'\''t lose track of the user'\''s request.
- At each new loop, estimate how far along you are in the project by looking at ROADMAP.md
- A "step" means ONE of: a single file change, OR one small feature, OR one focused refactoring
- NEVER do more than one step per iteration - if a TODO seems large, enter PLANNING phase and break it into multiple smaller sub-tasks FIRST
- After breaking down a task, execute only ONE sub-task, then stop
- Better to make steps too small than too large - granular progress is safer than large jumps
- Each step must include updating ROADMAP.md to reflect the change
- Create FINISHED.md ONLY when ALL of these conditions are met:
  * All TODO items are checked and moved to COMPLETED
  * All OBJECTIVES are achieved
  * You have done a final REVIEWING phase to verify everything works
  * BLOCKED section is empty or all blockers are resolved/documented as acceptable limitations
- In FINISHED.md, include: summary of what was built, key decisions made, known limitations, and suggestions for future improvements
- After creating FINISHED.md, ask the user what to do next
- After implementing any feature or code change, add a validation/testing step to verify it works as expected
- Include testing tasks explicitly in the TODO section of ROADMAP.md
- Do not mark implementation tasks as COMPLETED without at least basic manual verification or testing
- If tests fail, document in LESSONS_LEARNED and create follow-up tasks
- If you realize a previous decision or implementation was wrong, explicitly document this in the DECISIONS section with "CORRECTION:" prefix
- Update ROADMAP.md to reflect the corrected approach: move incorrectly completed items back to TODO or create new corrective tasks
- Don'\''t hesitate to mark previously "completed" items as needing rework if you discover issues
- Learning from mistakes and adapting is more important than maintaining the appearance of linear progress
</BUILDER_RULES>
'

# Function to show usage
show_help() {
    cat << EOF
Usage: aider_builder.sh -n_iter N -s SPECIFICATIONS [--extra_rules RULES_STRING] [AIDER_ARGS...]

Run aider in a loop with builder rules.

Required arguments:
  -n_iter N                    Number of iterations per batch (must be > 1)
  -s, --specifications SPEC    Specifications for what to build (passed as --message to aider)

Optional arguments:
  --extra_rules RULES      Additional rules to append to built-in builder rules
  -h, --help              Show this help message and exit
  -v, --version           Show version and exit
  
  AIDER_ARGS...           Additional arguments to pass to aider
                          Note: Do not use --message in AIDER_ARGS as it will be
                          automatically set from the --specifications argument

EOF
    exit 0
}

# Parse arguments
n_iter=""
specifications=""
extra_rules=""
aider_args=()

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            ;;
        -v|--version)
            echo "aider_builder.sh version $VERSION"
            exit 0
            ;;
        -n_iter)
            if [[ -z "$2" ]] || [[ ! "$2" =~ ^[0-9]+$ ]]; then
                echo "Error: -n_iter requires a number as argument"
                exit 1
            fi
            n_iter=$2
            shift 2
            ;;
        -s|--specifications)
            if [[ -z "$2" ]]; then
                echo "Error: -s/--specifications requires a string as argument"
                exit 1
            fi
            specifications=$2
            shift 2
            ;;
        --extra_rules)
            if [[ -z "$2" ]]; then
                echo "Error: --extra_rules requires a string as argument"
                exit 1
            fi
            extra_rules=$2
            shift 2
            ;;
        *)
            aider_args+=("$1")
            shift
            ;;
    esac
done

# Show help if no arguments provided
if [[ -z "$n_iter" ]] && [[ -z "$specifications" ]] && [[ ${#aider_args[@]} -eq 0 ]]; then
    show_help
fi

# Validate required arguments
if [[ -z "$n_iter" ]]; then
    echo "Error: -n_iter argument is required"
    echo "Use -h or --help for usage information"
    exit 1
fi

if [[ -z "$specifications" ]]; then
    echo "Error: -s/--specifications argument is required"
    echo "Use -h or --help for usage information"
    exit 1
fi

# Check that --message is not in aider_args
for arg in "${aider_args[@]}"; do
    if [[ "$arg" == "--message" || "$arg" == "-m" ]]; then
        echo "Error: --message/-m should not be provided in AIDER_ARGS"
        echo "Use -s/--specifications instead, which will be passed as --message to aider"
        exit 1
    fi
done

if [[ $n_iter -le 1 ]]; then
    echo "Error: -n_iter must be greater than 1"
    exit 1
fi

# Combine builder rules with extra rules if provided
combined_rules="$BUILDER_RULES"
if [[ -n "$extra_rules" ]]; then
    combined_rules="$combined_rules

<EXTRA_BUILDER_RULES>
$extra_rules
</EXTRA_BUILDER_RULES>
"
fi

# Create temporary file for rules
rules_tmp_file=$(mktemp)
trap "rm -f $rules_tmp_file" EXIT
echo "$combined_rules" > "$rules_tmp_file"

# Check if FINISHED.md already exists before starting
if [[ -f "FINISHED.md" ]]; then
    echo "Error: FINISHED.md already exists in the current directory"
    echo "This file indicates a previous build has finished."
    echo "Please remove or rename FINISHED.md before starting a new build session."
    exit 1
fi

counter=0
total_iterations=0

while true; do
    # Run loop n_iter times
    for ((i=1; i<=n_iter; i++)); do
        # Check if build is finished
        if [[ -f "FINISHED.md" ]]; then
            echo "\n###################"
            echo "# Build finished! FINISHED.md detected."
            echo "###################"
            echo "Completed $total_iterations total iterations."
            exit 0
        fi

        counter=$((counter + 1))
        total_iterations=$((total_iterations + 1))

        echo "\n###################"
        echo "# AiderBuilder iteration #$total_iterations ($(date))"
        echo "###################"

        aider --read "$rules_tmp_file" --message "Remember that you are in builder mode: $specifications" "${aider_args[@]}"
    done

    # Ask user to continue
    echo "\nCompleted $n_iter iterations (total: $total_iterations)"
    read "response?Continue for another $n_iter iterations? (y/N): "

    case $response in
        [Yy]* ) 
            echo "Continuing..."
            counter=0
            ;;
        * ) 
            echo "Stopping."
            exit 0
            ;;
    esac
done
